# 1.BFS and DFS
from collections import defaultdict, deque

class Graph:
    def __init__(self):
        self.graph = defaultdict(list)

    def add_edge(self, u, v):
        self.graph[u].append(v)
        self.graph[v].append(u)

    def dfs(self, v, visited=None):
        if visited is None:
            visited = set()
        visited.add(v)
        print(v, end=' ')
        for neighbor in self.graph[v]:
            if neighbor not in visited:
                self.dfs(neighbor, visited)

    def bfs(self, start):
        visited = set()
        queue = deque([start])
        visited.add(start)
        while queue:
            vertex = queue.popleft()
            print(vertex, end=' ')
            for neighbor in self.graph[vertex]:
                if neighbor not in visited:
                    visited.add(neighbor)
                    queue.append(neighbor)

g = Graph()
g.add_edge(0, 1)
g.add_edge(0, 2)
g.add_edge(1, 3)
g.add_edge(2, 4)

print("DFS:")
g.dfs(0)

print("\nBFS:")
g.bfs(0)




# 2.A* Algorithm
import heapq

graph = {
    'A': [('B', 4), ('C', 3)],
    'B': [('D', 5), ('E', 12)],
    'C': [('F', 7)],
    'D': [('G', 4)],
    'E': [('G', 2)],
    'F': [('G', 1)],
    'G': []
}

heuristic = {
    'A': 7, 'B': 6, 'C': 2, 'D': 3, 'E': 1, 'F': 1, 'G': 0
}

def a_star(start, goal):
    open_list = [(heuristic[start], 0, start, [start])]
    while open_list:
        _, cost, node, path = heapq.heappop(open_list)
        if node == goal:
            return path, cost
        for neighbor, edge_cost in graph.get(node, []):
            total_cost = cost + edge_cost
            heapq.heappush(open_list, (total_cost + heuristic[neighbor], total_cost, neighbor, path + [neighbor]))
    return None, float('inf')

path, cost = a_star('A', 'G')
if path:
    print("Optimal Path:", " -> ".join(path))
    print("Total Cost:", cost)
else:
    print("No path found.")




#3.SELECTION SORT
arr = list(map(int, input("Enter Array:").split()))
n = len(arr)
for i in range(n):
    min = i
    for j in range(i+1,n):
        if arr[j]<arr[min]:
            min = j
    arr[i],arr[min]=arr[min],arr[i]
print("Sorted Array:",arr)



# 4. N-queens

import time
class NQueens:
    def __init__(self):
        self.n = int(input("Enter board size: "))
        self.board = [[False] * self.n for _ in range(self.n)]
        self.count = 0

    def printBoard(self):
        for row in self.board:
            print(" ".join("Q" if x else "X" for x in row))
        print()

    def isSafe(self, row, col):
        for i in range(row):
            if self.board[i][col]: return False
        for i, j in zip(range(row-1, -1, -1), range(col-1, -1, -1)):
            if self.board[i][j]: return False
        for i, j in zip(range(row-1, -1, -1), range(col+1, self.n)):
            if self.board[i][j]: return False
        return True

    def solve(self, row=0):
        if row == self.n:
            self.count += 1
            self.printBoard()
            return
        for col in range(self.n):
            if self.isSafe(row, col):
                self.board[row][col] = True
                self.solve(row + 1)
                self.board[row][col] = False 

solver = NQueens()
start = time.time()
solver.solve()
print("Total solutions:", solver.count)
print("Time taken:", round(time.time() - start, 4), "seconds")




# 5.Chatbot
def chatbot():
    print("ðŸ¤– Hello! Iâ€™m ShopBot. How can I help you today?")
    print("Type 'exit' to end the chat.\n")

    while True:
        user_input = input("You: ").lower()

        if user_input == 'exit':
            print("ShopBot: Thank you for visiting! Have a great day! ðŸ˜Š")
            break

        elif "order" in user_input and ("status" in user_input or "track" in user_input):
            print("ShopBot: You can track your order using the tracking ID sent to your email.")
        
        elif "return" in user_input or "refund" in user_input:
            print("ShopBot: To return a product, go to 'My Orders' and select 'Return'. Refunds are processed within 5-7 days.")
        
        elif "product" in user_input or "availability" in user_input:
            print("ShopBot: Could you please specify the product name or category?")
        
        elif "hello" in user_input or "hi" in user_input:
            print("ShopBot: Hi there! ðŸ‘‹ How can I assist you?")
        
        elif "help" in user_input:
            print("ShopBot: I can help you with order tracking, returns, product inquiries, and more.")
        
        else:
            print("ShopBot: I'm sorry, I didn't understand that. Could you please rephrase?")

# Run the chatbot
chatbot()
